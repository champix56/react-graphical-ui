{"version":3,"sources":["../../src/GraphCircular/Graphcircular.tsx","../../src/GraphHistogram/GraphHistogram.tsx","../../src/GraphCloudPoint/GraphCloudPoint.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["theme","GraphCircular","startAlpha","Math","alpha","pointStr","color","colorStep","props","params","getColorOf","className","styles","height","width","display","viewBox","version","points","stroke","x","textAnchor","alignmentBaseline","y","fontSize","cx","cy","r","strokeWidth","fill","value","GraphHistogram","maxval","e","hrate","wrate","gridrate","grid","index","t","GraphHistogramme","React","id","x1","x2","y1","y2","offset","stopColor","refX","refY","markerWidth","markerHeight","orient","d","key","i","legendValue","bar","markerStart","markerEnd","values","GraphCloudPoint","point","markerMid","ExampleComponent","text","App","style","textAlign","max","withGrid","notAllreadyFull","whithGrid","gridDivisionCount","ReactDOM","render","document","getElementById"],"mappings":"qYAKMA,EAAM,CAAC,UAAD,0CAAZ,OAUMC,EAA6C,SAAC,GAYhD,IARA,IAGIC,GAAYC,KAAhB,GACIC,EAAJ,EACIC,EAAJ,GAEMC,EAoBN,YACE,IAAMC,EAAUP,eAAcQ,WAA2BA,MAAYA,EAAvCA,MAAqDA,EAArDA,IAA9B,KAEE,OAAOR,GADES,EAAX,GACE,WAvBQC,CAAWF,EAAvB,OACQJ,MAAsBD,SAAcC,IAyBnC,EAAID,KAAJ,SAAeK,WAA2BA,MAAYA,EAAvCA,MAAqDA,EAArDA,IAAtB,KAzBwFA,EAA1F,OAEKH,SAAH,IAAqBA,QACrBA,GAXF,GAWgBF,YAAJ,IAXZ,GAW6CA,YAC3CC,GAAO,EAAED,KAAF,GAXT,IAcA,OACE,yBAAKQ,UAAWC,E,cAAkC,gBAChDC,OAAQL,EAAMK,OAAQC,MAAON,EAAMM,MAAOC,QAASP,EAAMO,QACzDC,QAAQ,oBAAoBC,QAAQ,OACnCT,EAAA,SAAe,8BAAUU,OAAO,eAAeC,OAAO,UAHzD,GAIGX,EAAA,SAAe,8BAAUU,OAAO,eAAeC,OAAO,UAJzD,GAKE,0BAAMC,EAAE,IAAIC,WAAW,SAASC,kBAAkB,SAASC,EAAE,IAAIC,SAAS,MAAOhB,EALnF,OAME,4BAAQiB,GAAG,IAAIC,GAAG,IAAIC,EAAE,KAAKC,YAAY,IAAIT,OAAO,YAAYU,KAAK,SACrE,4BAAQJ,GAAG,IAAIC,GAAG,IAAIC,EAAE,KAAKC,YAAY,IAAIT,OAAO,YAAYU,KAAK,SACrE,8BAAUX,OAAQb,EAAUc,OAAQb,EAAOsB,YAAY,KAAKC,KAAK,OAAOlB,UAAWC,MAYzFX,eAA6B,CAC3B6B,MAD2B,GAE3BjB,OAF2B,QAG3BC,MAH2B,QAI3BC,QAAS,U,oNCnDPgB,EAAiDvB,YACrD,IAAIwB,EAAJ,EACKxB,EAAL,IAMEwB,EAASxB,EAATwB,IALAxB,kBAAqByB,YACnBD,EAAUC,MAAVD,KAWJ,IALA,IAAME,EAAQ,KAAO1B,MAAYA,EAAZA,IAArB,GACM2B,EAAQ,IAAM3B,SAAN,QAA6BA,oBAA3C,GAEM4B,EAAW,KAAO5B,oBAA0BA,EAA1BA,kBAAxB,GACM6B,EAAO,IAAb,MACSC,EAAQ,IAAZ,EAA8Bf,EAAnC,EAA0Ce,GAA1C,EAAsDA,KAAmBf,IAAK,CAC5E,IAAMgB,EAAI,CAAEhB,EAAF,EAAYO,MAAO,GAAKE,GAAUT,GAAKf,oBAA0BA,EAA1BA,kBAAT,KACxC6B,UAGF,OACE,yBAAKrB,QAAQ,kBAAkBL,UAAWC,EAAO4B,iB,cAA8B,mBAC7E3B,OAAQL,EAAMK,OAAQC,MAAON,EAAMM,MAAOC,QAASP,EAAMO,SAEzD0B,8BACE,oCAAgBC,GAAG,uBAAuBC,GAAG,KAAKC,GAAG,OAAOC,GAAG,MAAMC,GAAG,KACtE,0BAAMC,OAAO,KAAKC,UAAU,YAC5B,0BAAMD,OAAO,MAAMC,UAAU,aAE/B,4BAAQN,GAAG,QAAQ1B,QAAQ,YAAYiC,KAAK,IAAIC,KAAK,IACnDC,YAAY,IAAIC,aAAa,IAC7BC,OAAO,sBACP,0BAAMC,EAAE,4BAIVjB,EAAA,KAAS,cACP,OAAQ,2BACN,0BAAMQ,GAAIZ,EAAEV,EAAGoB,GAAG,IAAIC,GAAG,MAAME,GAAIb,EAAEV,EAAGZ,UAAWC,EAAOyB,KAAMkB,IAAK,KAAOC,IAC5E,0BAAMlC,kBAAkB,SAASD,WAAW,MAAMD,EAAE,KAAKG,EAAGU,EAAEV,EAAGZ,UAAWC,EAAO6C,YAAaF,IAAK,KAAOC,GAAIvB,EAFlH,WAMHzB,EAAA,gBAAqB,cACpB,OACE,0BAAM+C,IAAK,IAAMC,EAAG7C,UAAWC,EAAO8C,IAAKtC,EAAGoC,IAAY,EAAGjC,EAAG,IAAMU,EAAIC,EAAOpB,MAAOqB,EAAQ,EAAGtB,OAAQoB,EAAIC,EAAOL,KAAK,kCAG/H,8BAAUX,OAAO,qBAAqBW,KAAK,OAAOV,OAAO,QACvDwC,YAAY,cAAcC,UAAU,kBAG5C7B,eAA8B,CAC5B8B,OAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,EADrC,IAE5B9C,QAF4B,SAG5BD,MAAO,Q,8QCxDHgD,EAAmDtD,YACvD,IAAIwB,EAAJ,EACKxB,EAAL,IAMEwB,EAASxB,EAATwB,IALAxB,kBAAqByB,YACnBD,EAAUC,MAAVD,KAWJ,IALA,IAAME,EAAQ,KAAO1B,MAAYA,EAAZA,IAArB,GACM2B,EAAQ,IAAM3B,SAAN,QAA6BA,oBAA3C,GAEM4B,EAAW,KAAO5B,oBAA0BA,EAA1BA,kBAAxB,GACM6B,EAAO,IAAb,MACSC,EAAQ,IAAZ,EAA8Bf,EAAnC,EAA0Ce,GAA1C,EAAsDA,KAAmBf,IAAK,CAC5E,IAAMgB,EAAI,CAAEhB,EAAF,EAAYO,MAAO,GAAKE,GAAUT,GAAKf,oBAA0BA,EAA1BA,kBAAT,KACxC6B,UAGF,IAAInB,EAAJ,GAKA,OAJAV,kBAAqB,cACnB,IAAIuD,EAAcP,IAAarB,EAAnB,OAAwC,IAAMF,EAA1D,GACAf,IAAWA,eAAD,IAAVA,KAGA,yBAAKF,QAAQ,kBAAkBL,UAAWC,EAAO4B,iB,cAA8B,mBAC/E3B,OAAQL,EAAMK,OAAQC,MAAON,EAAMM,MAAOC,QAASP,EAAMO,SAEvD0B,8BACE,4BAAQC,GAAG,QAAQ1B,QAAQ,YAAYiC,KAAK,IAAIC,KAAK,IACnDC,YAAY,IAAIC,aAAa,IAC7BC,OAAO,sBACP,0BAAMC,EAAE,2BAEV,4BAAQZ,GAAG,MAAM1B,QAAQ,YAAYiC,KAAK,IAAIC,KAAK,IACjDC,YAAY,IAAIC,aAAa,KAC7B,4BAAQ3B,GAAG,IAAIC,GAAG,IAAIC,EAAE,IAAIE,KAAK,UAInCQ,EAAA,KAAS,cACP,OAAQ,2BACN,0BAAMQ,GAAIZ,EAAEV,EAAGoB,GAAG,IAAIC,GAAG,MAAME,GAAIb,EAAEV,EAAGZ,UAAWC,EAAOyB,KAAMkB,IAAK,IAAMC,IAC3E,0BAAMlC,kBAAkB,SAASD,WAAW,MAAMD,EAAE,KAAKG,EAAGU,EAAEV,EAAGZ,UAAWC,EAAO6C,YAAaF,IAAK,IAAMC,GAAIvB,EAFjH,WAMJ,8BAAUf,OACRA,EACAW,KAAK,OAAOV,OAAO,QACnBwC,YAAY,YAAYC,UAAU,YAAYI,UAAU,cAE1D,8BAAU9C,OAAO,qBAAqBW,KAAK,OAAOV,OAAO,QACvDwC,YAAY,cAAcC,UAAU,kBAG5CE,eAA+B,CAC7BD,OAAQ,CAAC,GAAD,yDADqB,GAE7B/C,MAF6B,OAG7BC,QAAS,U,IC5DEkD,EAAmB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KACjC,OAAO,+BAAKvD,UAAWC,GAAhB,sBAAP,IC6BauD,EA3BH,WACV,OAAO,oCACL,kBAAC,EAAD,CAAwBD,KAAK,oCAC7B,yBAAKE,MAAO,CAACC,UAAU,WACrB,0DACA,oGACA,kBAAC,EAAD,CAAUvC,MAAO,KACjB,kBAAC,EAAD,CAAUA,MAAO,KACjB,kBAAC,EAAD,CAAUA,MAAO,KACjB,kBAAC,EAAD,CAAUA,MAAO,KACjB,kBAAC,EAAD,CAAUA,MAAO,GAAKwC,IAAK,IAAKvD,QAAQ,SAASwD,UAAU,KAE7D,yBAAKH,MAAO,CAACC,UAAU,WACrB,2DACA,6JACA,kBAAC,EAAD,CAAWR,OAAQ,CAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIW,iBAAiB,EAAOC,WAAW,EAAMC,kBAAmB,GAAIJ,IAAK,IAAKvD,QAAQ,WAC1L,kBAAC,EAAD,CAAW8C,OAAQ,CAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAIW,iBAAiB,EAAMC,WAAW,EAAMC,kBAAmB,EAAGJ,IAAK,OAE7K,yBAAKF,MAAO,CAACC,UAAU,WACrB,6DACA,0FACA,kBAAC,EAAD,CAAaR,OAAQ,CAAC,IAAI,IAAI,IAAI,IAAI,GAAG,KAAMS,IAAK,MACpD,kBAAC,EAAD,CAAaT,OAAQ,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,SC1B9Cc,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.7d3815c2.chunk.js","sourcesContent":["import React from 'react';\r\n//import PropTypes from 'prop-types';\r\n\r\nimport styles from './GraphCircular.module.css';\r\n\r\nconst theme=[\"skyblue\",\"skyblue\",\"yellowgreen\",\"orange\",\"tomato\",\"red\"]\r\n\r\nexport interface GraphCircularProps{\r\n  //Value\r\n  value: number,\r\n  //options\r\n  max?: number,withGrid?: boolean,\r\n  height?: string, width?: string,\r\n  display?: string//\"inline\" | \"block\"\r\n}\r\nconst GraphCircular:React.FC<GraphCircularProps> = (\r\n  props// :{children:any ,value: number, max?: number,withGrid: boolean,height?: string, width?: string, display?: \"inline\" | \"block\"}\r\n  // props:{value:string}\r\n  )=>{\r\n    const rayon1 = 70;//, rayon2 = 20;\r\n    const stepsPerRevolution = 256;\r\n    let points: Array<{ x: number, y: number }> = [];\r\n    let startAlpha=-Math.PI;\r\n    let alpha = startAlpha;\r\n    let pointStr=\"\";\r\n\r\n    const color=getColorOf(props.value)\r\n    while ( alpha - startAlpha < (Math.PI*2) && alpha - startAlpha < ( alphaStepValuesRatio()*props.value )) {\r\n      points.push({x:Math.cos(alpha)*rayon1,y:Math.sin(alpha)*rayon1});\r\n      if(pointStr.length>1)pointStr+=\" \";\r\n      pointStr+=\"\"+(Math.cos(alpha)*rayon1)+\",\"+(Math.sin(alpha)*rayon1);\r\n      alpha+=2*Math.PI/stepsPerRevolution;\r\n    };\r\n\r\n    return (\r\n      <svg className={styles.GraphCircular} data-testid=\"GraphCircular\"\r\n        height={props.height} width={props.width} display={props.display}\r\n        viewBox=\"-110 -110 220 220\" version=\"1.1\">\r\n        {props.withGrid?<polyline points=\"-100,0 100,0\" stroke=\"black\"/>:\"\"}\r\n        {props.withGrid?<polyline points=\"0,-100 0,100\" stroke=\"black\" /> :\"\"}\r\n        <text x=\"0\" textAnchor=\"middle\" alignmentBaseline=\"middle\" y=\"0\" fontSize=\"45\" >{props.value}</text>\r\n        <circle cx=\"0\" cy=\"0\" r=\"55\" strokeWidth=\"3\" stroke=\"lightgrey\" fill=\"none\" />\r\n        <circle cx=\"0\" cy=\"0\" r=\"80\" strokeWidth=\"3\" stroke=\"lightgrey\" fill=\"none\" />\r\n        <polyline points={pointStr} stroke={color} strokeWidth=\"50\" fill=\"none\" className={styles.bar} />\r\n      </svg>\r\n    );\r\n    function getColorOf(params:number):string {\r\n      const colorStep=theme.length/(props.max !== undefined && props.max > props.value ? props.max : 100);\r\n      const step=params * colorStep;\r\n        return theme[step.toFixed()];\r\n    }\r\n    function alphaStepValuesRatio() {\r\n      return 2 * Math.PI / (props.max !== undefined && props.max > props.value ? props.max : 100);\r\n    }\r\n  };\r\n  GraphCircular.defaultProps = {\r\n    value: 50,//[20,25,35,10,5,5],\r\n    height: \"200px\",\r\n    width: \"250px\",\r\n    display: \"inline\"\r\n  };\r\n  export default GraphCircular;\r\n","import React from 'react'\nimport styles from './GraphHistogram.module.css';\n\ninterface GraphHistogramProps {\n  values: Array<number>, max?: number,\n  height?: string, width?: string, display?: string,\n  whithGrid?: boolean, gridDivisionCount?: number, notAllreadyFull?: boolean\n}\nconst GraphHistogram: React.FC<GraphHistogramProps> = (props) => {\n  let maxval = 0;\n  if (!props.max) {\n    props.values.forEach(e => {\n      maxval = (e > maxval ? e : maxval)\n    });\n  }\n  else {\n    maxval = props.max;\n  }\n  const hrate = 100 / (props.max ? props.max : maxval);\n  const wrate = 230 / props.values.length - (props.notAllreadyFull ? 1 : 0);\n\n  const gridrate = 100 / (props.gridDivisionCount ? props.gridDivisionCount : 5);\n  const grid = new Array<{ y: number, value: string }>();\n  for (let index = 100.0 - gridrate, y = 1; index >= 0; index -= gridrate, y++) {\n    const t = { y: index, value: '' + maxval * (y / (props.gridDivisionCount ? props.gridDivisionCount : 5)) }\n    grid.push(t);\n\n  }\n  return (\n    <svg viewBox=\"-30 -20 270 130\" className={styles.GraphHistogramme} data-testid=\"GraphHistogramme\"\n      height={props.height} width={props.width} display={props.display}\n    >\n      <defs>\n        <linearGradient id=\"effetArrondiVertical\" x1=\"0%\" x2=\"100%\" y1=\"20%\" y2=\"0\">\n          <stop offset=\"0%\" stopColor=\"#B7CA79\"></stop>\n          <stop offset=\"80%\" stopColor=\"#677E52\"></stop>\n        </linearGradient>\n        <marker id=\"arrow\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\"\n          markerWidth=\"6\" markerHeight=\"6\"\n          orient=\"auto-start-reverse\">\n          <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n        </marker>\n      </defs>\n      {\n        grid.map((e, i) => {\n          return (<g>\n            <line y1={e.y} x1=\"0\" x2=\"230\" y2={e.y} className={styles.grid} key={'lh' + i} />\n            <text alignmentBaseline=\"middle\" textAnchor=\"end\" x=\"-2\" y={e.y} className={styles.legendValue} key={'th' + i}>{e.value}</text>\n          </g>)\n        })\n      }\n      {props.values.flatMap((e, i) => {\n        return (\n          <rect key={\"r\" + i} className={styles.bar} x={i * wrate + 2} y={100 - e * hrate} width={wrate - 1} height={e * hrate} fill=\"url(#effetArrondiVertical)\" />\n        );\n      })}\n      <polyline points=\"0,-5 0,100 230,100\" fill=\"none\" stroke=\"black\"\n        markerStart=\"url(#arrow)\" markerEnd=\"url(#arrow)\" />\n    </svg>);\n}\nGraphHistogram.defaultProps = {\n  values: [10, 20, 50, 75, 100, 20, 25, 56, 25, 32, 89, 7, 89, 42, 1, 23],\n  display: \"inline\",\n  width: '48vw'\n}\nexport default GraphHistogram;\n","import React from 'react';\r\nimport styles from './GraphCloudPoint.module.css';\r\ninterface GraphCloudPointProps{\r\n  values: Array<number>, max?: number,\r\n  height?: string, width?: string, display?: \"inline\" | \"block\"\r\n  whithGrid?: boolean, gridDivisionCount?: number, notAllreadyFull?: boolean\r\n}\r\nconst GraphCloudPoint: React.FC<GraphCloudPointProps> = (props) => {\r\n  let maxval = 0;\r\n  if (!props.max) {\r\n    props.values.forEach(e => {\r\n      maxval = (e > maxval ? e : maxval)\r\n    });\r\n  }\r\n  else {\r\n    maxval = props.max;\r\n  }\r\n  const hrate = 100 / (props.max ? props.max : maxval);\r\n  const wrate = 230 / props.values.length - (props.notAllreadyFull ? 1 : 0);\r\n\r\n  const gridrate = 100 / (props.gridDivisionCount ? props.gridDivisionCount : 5);\r\n  const grid = new Array<{ y: number, value: string }>();\r\n  for (let index = 100.0 - gridrate, y = 1; index >= 0; index -= gridrate, y++) {\r\n    const t = { y: index, value: '' + maxval * (y / (props.gridDivisionCount ? props.gridDivisionCount : 5)) }\r\n    grid.push(t);\r\n\r\n  }\r\n  let points = \"\";\r\n  props.values.forEach((e, i) => {// x={i * wrate + 2} y={100 - e * hrate}\r\n    let point = \"\" + (i * wrate + (wrate / 2)) + \",\" + (100 - e * hrate);\r\n    points += (points.length > 0 ? \" \" : \"\") + point;\r\n  })\r\n  return (\r\n    <svg viewBox=\"-30 -20 270 130\" className={styles.GraphHistogramme} data-testid=\"GraphHistogramme\"\r\n    height={props.height} width={props.width} display={props.display}\r\n     >\r\n      <defs>\r\n        <marker id=\"arrow\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\"\r\n          markerWidth=\"6\" markerHeight=\"6\"\r\n          orient=\"auto-start-reverse\">\r\n          <path d=\"M 0 0 L 10 5 L 0 10 z\" />\r\n        </marker>\r\n        <marker id=\"dot\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\"\r\n          markerWidth=\"5\" markerHeight=\"5\">\r\n          <circle cx=\"5\" cy=\"5\" r=\"5\" fill=\"red\" />\r\n        </marker>\r\n      </defs>\r\n      {\r\n        grid.map((e, i) => {\r\n          return (<g>\r\n            <line y1={e.y} x1=\"0\" x2=\"230\" y2={e.y} className={styles.grid} key={'l' + i} />\r\n            <text alignmentBaseline=\"middle\" textAnchor=\"end\" x=\"-2\" y={e.y} className={styles.legendValue} key={'t' + i}>{e.value}</text>\r\n          </g>)\r\n        })\r\n      }\r\n      <polyline points={\r\n        points\r\n      } fill=\"none\" stroke=\"black\"\r\n        markerStart=\"url(#dot)\" markerEnd=\"url(#dot)\" markerMid=\"url(#dot)\" />\r\n\r\n      <polyline points=\"0,-5 0,100 230,100\" fill=\"none\" stroke=\"black\"\r\n        markerStart=\"url(#arrow)\" markerEnd=\"url(#arrow)\" />\r\n    </svg>);\r\n}\r\nGraphCloudPoint.defaultProps = {\r\n  values: [ 20, 50, 75, 100, 20, 25, 56, 25, 32, 89, 7, 89, 42, 1, 23, 75, 100, 20, 25, 56, 2],\r\n  width: \"48vw\",\r\n  display: \"inline\"\r\n}\r\nexport default GraphCloudPoint;\r\n","import * as React from 'react'\r\nimport styles from './styles.module.css'\r\n\r\ninterface Props {\r\n  text: string\r\n}\r\n\r\nexport const ExampleComponent = ({ text }: Props) => {\r\n  return <div className={styles.test}>Example Component: {text}</div>\r\n}\r\n\r\nexport  {default as Circular } from \"./GraphCircular/Graphcircular\";\r\nexport  {default as Histogram } from \"./GraphHistogram/GraphHistogram\";\r\nexport  {default as CloudPoints } from \"./GraphCloudPoint/GraphCloudPoint\";\r\n\r\n","import React from 'react'\n\n// import { GraphCircular } from 'react-graphical-ui'\nimport 'react-graphical-ui/dist/index.css'\nimport * as Graph from 'react-graphical-ui';\nimport { Circular } from 'react-graphical-ui';\nimport { Histogram } from 'react-graphical-ui';\nimport { CloudPoints } from 'react-graphical-ui';\n\n\nconst App = () => {\n  return <>\n    <Graph.ExampleComponent text=\"react-graphical-ui 😄\"></Graph.ExampleComponent>\n    <div style={{textAlign:'center'}}>\n      <h2>Circular graphs components</h2>\n      <h3>&lt;Circular value=&#123;47&#125;  max=&#123;100&#125; display=\"inline\" withGrid=&#123;false&#125; /&gt;</h3>\n      <Circular value={33} ></Circular>\n      <Circular value={10} ></Circular>\n      <Circular value={47} ></Circular>\n      <Circular value={77} ></Circular>\n      <Circular value={47}  max={100} display=\"inline\" withGrid={true} />\n    </div>\n    <div style={{textAlign:'center'}}>\n      <h2>Histogram graphs components</h2>\n      <h3>&lt;Histogram values=&#123;[47,...]&#125;  max=&#123;150&#125; notAllreadyFull=&#123;false&#125;  withGrid=&#123;false&#125;  gridDivisionCount=&#123;10&#125; display=\"inline\" /&gt;</h3>\n      <Histogram values={[ 20, 80, 19, 63, 80, 99, 56, 8, 49, 19, 21, 69, 56, 12, 23, 25, 10, 80, 25, 56, 2]} notAllreadyFull={false} whithGrid={true} gridDivisionCount={10} max={150} display=\"inline\" />\n      <Histogram values={[ 20, 80, 19, 63, 80, 99, 56, 8, 49, 19, 21, 69, 56, 12, 23, 25, 10, 80, 25, 56, 2]} notAllreadyFull={true} whithGrid={true} gridDivisionCount={5} max={150} />\n    </div>\n    <div style={{textAlign:'center'}}>\n      <h2>CloudPoints graphs components</h2>\n      <h3>&lt;CloudPoints values=&#123;[125,547,451,123,40,330]&#125; max=&#123;550&#125;/&gt;</h3>\n      <CloudPoints values={[125,547,451,123,40,330]} max={550}></CloudPoints>\n      <CloudPoints values={[40,31,23,40,30,12,23]}></CloudPoints>\n    </div>\n  </>\n}\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}